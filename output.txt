
i=0, j=0
Upper[] now looks like:
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  -1
position is on edge, so union current position and lastPos
Calling union on [0,0] and [5,0]
Calling root(0)
upper[0]<0, so return 0
Calling root(30)
upper[30]<0, so return 30
Since pos 0 not equal to pos 30
upper[0]=upper[0] + upper[30]= -2
upper[30]=0

i=0, j=1
Upper[] now looks like:
 -2  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [0,1] and [5,0]
Calling root(1)
upper[1]<0, so return 1
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 1 not equal to pos 0
and upper[0]<upper[1], so swap the values of x and y
upper[0]=upper[0] + upper[1]= -3
upper[1]=0

i=0, j=2
Upper[] now looks like:
 -3   0  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [0,2] and [5,0]
Calling root(2)
upper[2]<0, so return 2
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 2 not equal to pos 0
and upper[0]<upper[2], so swap the values of x and y
upper[0]=upper[0] + upper[2]= -4
upper[2]=0

i=0, j=3
Upper[] now looks like:
 -4   0   0  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [0,3] and [5,0]
Calling root(3)
upper[3]<0, so return 3
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 3 not equal to pos 0
and upper[0]<upper[3], so swap the values of x and y
upper[0]=upper[0] + upper[3]= -5
upper[3]=0

i=0, j=4
Upper[] now looks like:
 -5   0   0   0  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [0,4] and [5,0]
Calling root(4)
upper[4]<0, so return 4
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 4 not equal to pos 0
and upper[0]<upper[4], so swap the values of x and y
upper[0]=upper[0] + upper[4]= -6
upper[4]=0

i=0, j=5
Upper[] now looks like:
 -6   0   0   0   0  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [0,5] and [5,0]
Calling root(5)
upper[5]<0, so return 5
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 5 not equal to pos 0
and upper[0]<upper[5], so swap the values of x and y
upper[0]=upper[0] + upper[5]= -7
upper[5]=0

i=1, j=0
Upper[] now looks like:
 -7   0   0   0   0   0 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [1,0] and [5,0]
Calling root(6)
upper[6]<0, so return 6
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 6 not equal to pos 0
and upper[0]<upper[6], so swap the values of x and y
upper[0]=upper[0] + upper[6]= -8
upper[6]=0

i=1, j=1
Upper[] now looks like:
 -8   0   0   0   0   0 
  0  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
pos and pos.down are zeros, so union them
Calling union on [1,1] and [2,1]
Calling root(7)
upper[7]<0, so return 7
Calling root(13)
upper[13]<0, so return 13
Since pos 7 not equal to pos 13
upper[7]=upper[7] + upper[13]= -2
upper[13]=7

i=1, j=2
Upper[] now looks like:
 -8   0   0   0   0   0 
  0  -2  -1  -1  -1  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=1, j=3
Upper[] now looks like:
 -8   0   0   0   0   0 
  0  -2  -1  -1  -1  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
pos and pos.down are zeros, so union them
Calling union on [1,3] and [2,3]
Calling root(9)
upper[9]<0, so return 9
Calling root(15)
upper[15]<0, so return 15
Since pos 9 not equal to pos 15
upper[9]=upper[9] + upper[15]= -2
upper[15]=9

i=1, j=4
Upper[] now looks like:
 -8   0   0   0   0   0 
  0  -2  -1  -2  -1  -1 
 -1   7  -1   9  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=1, j=5
Upper[] now looks like:
 -8   0   0   0   0   0 
  0  -2  -1  -2  -1  -1 
 -1   7  -1   9  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [1,5] and [5,0]
Calling root(11)
upper[11]<0, so return 11
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 11 not equal to pos 0
and upper[0]<upper[11], so swap the values of x and y
upper[0]=upper[0] + upper[11]= -9
upper[11]=0

i=2, j=0
Upper[] now looks like:
 -9   0   0   0   0   0 
  0  -2  -1  -2  -1   0 
 -1   7  -1   9  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [2,0] and [5,0]
Calling root(12)
upper[12]<0, so return 12
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 12 not equal to pos 0
and upper[0]<upper[12], so swap the values of x and y
upper[0]=upper[0] + upper[12]= -10
upper[12]=0

i=2, j=1
Upper[] now looks like:
-10   0   0   0   0   0 
  0  -2  -1  -2  -1   0 
  0   7  -1   9  -1  -1 
 -1  -1  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
pos and pos.down are zeros, so union them
Calling union on [2,1] and [3,1]
Calling root(13)
upper[13]>=0, so return root(upper[13])
Calling root(7)
upper[7]<0, so return 7
Calling root(19)
upper[19]<0, so return 19
Since pos 7 not equal to pos 19
upper[7]=upper[7] + upper[19]= -3
upper[19]=7

i=2, j=2
Upper[] now looks like:
-10   0   0   0   0   0 
  0  -3  -1  -2  -1   0 
  0   7  -1   9  -1  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=2, j=3
Upper[] now looks like:
-10   0   0   0   0   0 
  0  -3  -1  -2  -1   0 
  0   7  -1   9  -1  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
both pos and pos.right() are zeros, so union them
Calling union on [2,3] and [2,4]
Calling root(15)
upper[15]>=0, so return root(upper[15])
Calling root(9)
upper[9]<0, so return 9
Calling root(16)
upper[16]<0, so return 16
Since pos 9 not equal to pos 16
upper[9]=upper[9] + upper[16]= -3
upper[16]=9

i=2, j=4
Upper[] now looks like:
-10   0   0   0   0   0 
  0  -3  -1  -3  -1   0 
  0   7  -1   9   9  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=2, j=5
Upper[] now looks like:
-10   0   0   0   0   0 
  0  -3  -1  -3  -1   0 
  0   7  -1   9   9  -1 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [2,5] and [5,0]
Calling root(17)
upper[17]<0, so return 17
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 17 not equal to pos 0
and upper[0]<upper[17], so swap the values of x and y
upper[0]=upper[0] + upper[17]= -11
upper[17]=0

i=3, j=0
Upper[] now looks like:
-11   0   0   0   0   0 
  0  -3  -1  -3  -1   0 
  0   7  -1   9   9   0 
 -1   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [3,0] and [5,0]
Calling root(18)
upper[18]<0, so return 18
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 18 not equal to pos 0
and upper[0]<upper[18], so swap the values of x and y
upper[0]=upper[0] + upper[18]= -12
upper[18]=0

i=3, j=1
Upper[] now looks like:
-12   0   0   0   0   0 
  0  -3  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7  -1  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
both pos and pos.right() are zeros, so union them
Calling union on [3,1] and [3,2]
Calling root(19)
upper[19]>=0, so return root(upper[19])
Calling root(7)
upper[7]<0, so return 7
Calling root(20)
upper[20]<0, so return 20
Since pos 7 not equal to pos 20
upper[7]=upper[7] + upper[20]= -4
upper[20]=7

i=3, j=2
Upper[] now looks like:
-12   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=3, j=3
Upper[] now looks like:
-12   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=3, j=4
Upper[] now looks like:
-12   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0

i=3, j=5
Upper[] now looks like:
-12   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1  -1 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [3,5] and [5,0]
Calling root(23)
upper[23]<0, so return 23
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 23 not equal to pos 0
and upper[0]<upper[23], so swap the values of x and y
upper[0]=upper[0] + upper[23]= -13
upper[23]=0

i=4, j=0
Upper[] now looks like:
-13   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
 -1  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,0] and [5,0]
Calling root(24)
upper[24]<0, so return 24
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 24 not equal to pos 0
and upper[0]<upper[24], so swap the values of x and y
upper[0]=upper[0] + upper[24]= -14
upper[24]=0

i=4, j=1
Upper[] now looks like:
-14   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
  0  -1  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,1] and [5,0]
Calling root(25)
upper[25]<0, so return 25
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 25 not equal to pos 0
and upper[0]<upper[25], so swap the values of x and y
upper[0]=upper[0] + upper[25]= -15
upper[25]=0

i=4, j=2
Upper[] now looks like:
-15   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
  0   0  -1  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,2] and [5,0]
Calling root(26)
upper[26]<0, so return 26
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 26 not equal to pos 0
and upper[0]<upper[26], so swap the values of x and y
upper[0]=upper[0] + upper[26]= -16
upper[26]=0

i=4, j=3
Upper[] now looks like:
-16   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
  0   0   0  -1  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,3] and [5,0]
Calling root(27)
upper[27]<0, so return 27
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 27 not equal to pos 0
and upper[0]<upper[27], so swap the values of x and y
upper[0]=upper[0] + upper[27]= -17
upper[27]=0

i=4, j=4
Upper[] now looks like:
-17   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
  0   0   0   0  -1  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,4] and [5,0]
Calling root(28)
upper[28]<0, so return 28
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 28 not equal to pos 0
and upper[0]<upper[28], so swap the values of x and y
upper[0]=upper[0] + upper[28]= -18
upper[28]=0

i=4, j=5
Upper[] now looks like:
-18   0   0   0   0   0 
  0  -4  -1  -3  -1   0 
  0   7  -1   9   9   0 
  0   7   7  -1  -1   0 
  0   0   0   0   0  -1 
  0
position is on edge, so union current position and lastPos
Calling union on [4,5] and [5,0]
Calling root(29)
upper[29]<0, so return 29
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Since pos 29 not equal to pos 0
and upper[0]<upper[29], so swap the values of x and y
upper[0]=upper[0] + upper[29]= -19
upper[29]=0
Checking pos: 0,0
Calling root(0)
upper[0]<0, so return 0
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 0,1
Checking pos: 0,2
Checking pos: 0,3
Checking pos: 0,4
Checking pos: 0,5
Checking pos: 1,0
Checking pos: 1,1
Calling root(7)
upper[7]<0, so return 7
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
    pos: 1,1 is an island
Checking pos: 1,2
Calling root(8)
upper[8]<0, so return 8
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 1,3
Calling root(9)
upper[9]<0, so return 9
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
    pos: 1,3 is an island
Checking pos: 1,4
Calling root(10)
upper[10]<0, so return 10
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 1,5
Checking pos: 2,0
Checking pos: 2,1
Checking pos: 2,2
Calling root(14)
upper[14]<0, so return 14
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 2,3
Checking pos: 2,4
Checking pos: 2,5
Checking pos: 3,0
Checking pos: 3,1
Checking pos: 3,2
Checking pos: 3,3
Calling root(21)
upper[21]<0, so return 21
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 3,4
Calling root(22)
upper[22]<0, so return 22
Calling root(30)
upper[30]>=0, so return root(upper[30])
Calling root(0)
upper[0]<0, so return 0
Checking pos: 3,5
Checking pos: 4,0
Checking pos: 4,1
Checking pos: 4,2
Checking pos: 4,3
Checking pos: 4,4
Checking pos: 4,5
2
